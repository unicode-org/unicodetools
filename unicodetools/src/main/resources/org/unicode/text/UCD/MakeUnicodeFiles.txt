Generate: .
CopyrightYear: 2024

File: extra/ScriptNfkc
Property: SPECIAL
# Shows where the script values of a character don't agree with the script values of the NFKD form (skipping Common and Inherited)
#

File: extracted/DerivedName
#
# This file lists the values of the Name property.
# This property is specified by the derivation documented in
# Section 4.8 of the Unicode Standard, Version 13.0,
# based on the Name field in UnicodeData.txt,
# the Jamo_Short_Name property in Jamo.txt,
# and a specified list of pattern strings used to derive names
# for certain ranges of characters from their code points.
# This file provides a full listing of the derived values
# so that implementations do not have to properly
# code that derivation.
#
# The format is two fields separated by a semicolon.
# Field 0: Unicode code point value or range of code point values
# Field 1: Name property value or pattern.
#
# â€¢ Values containing a * character are patterns which
#   use the placeholder * in place of the code point in hex.
#   In such cases, the name property value for any code point in Field 0
#   is formed by replacing the '*' with that code point value
#   in the usual 4- to 6-digit hexadecimal format.
#
#   UAX #42 and its data files use a similar convention,
#   except that the metacharacter there is '#'.
#
#   For example, the Name property value of U+4E12,
#   generated from the pattern string "CJK UNIFIED IDEOGRAPH-*",
#   is CJK UNIFIED IDEOGRAPH-4E12.
#   Similarly, the Name property value of U+2F89F, 
#   generated from the pattern string "CJK COMPATIBILITY IDEOGRAPH-*",
#   is CJK COMPATIBILITY IDEOGRAPH-2F89F.
#
Property: SPECIAL

File: extra/DerivedLabel
#
Property: SPECIAL

File: ScriptExtensions
#
# The Script_Extensions property indicates which characters are commonly used
# with more than one script, but with a limited number of scripts.
# For each code point, there is one or more property values.  Each such value is a Script property value.
# For more information, see:
#   UAX #24, Unicode Script Property: https://www.unicode.org/reports/tr24/
#     Especially the sections:
#       https://www.unicode.org/reports/tr24/#Assignment_Script_Values
#       https://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values
#
# Each Script_Extensions value in this file consists of a set
# of one or more abbreviated Script property values. The ordering of the
# values in that set is not material, but for stability in presentation
# it is given here as alphabetical.
#
# The Script_Extensions values are presented in sorted order in the file.
# They are sorted first by the number of Script property values in their sets,
# and then alphabetically by first differing Script property value.
#
# Following each distinct Script_Extensions value is the list of code
# points associated with that value, listed in code point order.
# 
# All code points not explicitly listed for Script_Extensions
# have as their value the corresponding Script property value
#
# @missing: 0000..10FFFF; <script>

Property: Script_Extensions
Format: valueStyle=short

File: auxiliary/GraphemeBreakProperty
Property: Grapheme_Cluster_Break
Format:	skipValue=Other

File: auxiliary/WordBreakProperty
Property: Word_Break
Format:	skipValue=Other

File: auxiliary/SentenceBreakProperty
Property: Sentence_Break
Format:	skipValue=Other

File: auxiliary/GraphemeBreakTest
Property: SPECIAL

File: auxiliary/WordBreakTest
Property: SPECIAL

File: auxiliary/LineBreakTest
Property: SPECIAL

File: auxiliary/SentenceBreakTest
Property: SPECIAL

File: cldr/GraphemeBreakTest-cldr
Property: SPECIAL

File:	extra/BidiPairedBracketType
Property: BidiPairedBracketType
Format:	valueList skipUnassigned=None
# Property: BidiPairedBracketType
#
# @missing: 0000..10FFFF; None

File:	extra/BidiPairedBracket
Property: BidiPairedBracket
# Property: BidiPairedBracket
#
# @missing: 0000..10FFFF; None

File:	extra/Blocks
Property: Block
# Note:   When comparing block names, casing, whitespace, hyphens,
#         and underbars are ignored.
#         For example, "Latin Extended-A" and "latin extended a" are equivalent.
#         For more information on the comparison of property values, 
#            see UAX #44: https://www.unicode.org/reports/tr44/
#
#  All block ranges start with a value where (cp MOD 16) = 0,
#  and end with a value where (cp MOD 16) = 15. In other words,
#  the last hexadecimal digit of the start of range is ...0 
#  and the last hexadecimal digit of the end of range is ...F.
#  This constraint on block ranges guarantees that allocations
#  are done in terms of whole columns, and that code chart display
#  never involves splitting columns in the charts.
#
#  All code points not explicitly listed for Block
#  have the value No_Block.

# Property: Block
#
# @missing: 0000..10FFFF; No_Block
Format:	valueList skipUnassigned=No_Block

File:	CaseFolding
Property: SPECIAL

File:	DerivedAge
Property:	Age
# Property: Age
#
# Note: When using the Age property in regular expressions, 
# an expression such as "\p{age=3.0}" matches all of the code points
# assigned in Version 3.0--that is, all the code points with a value
# less than or equal to 3.0 for the Age property.
# For more information, see [https://www.unicode.org/reports/tr18/].
Format: nameStyle=none noLabel skipValue=Unassigned valueStyle=short

Value:	V1_1
# Assigned as of Unicode 1.1.0 (June, 1993)
# [excluding removed Hangul Syllables]

Value:	V2_0
# Newly assigned in Unicode 2.0.0 (July, 1996)

Value:	V2_1
# Newly assigned in Unicode 2.1.2 (May, 1998)

Value:	V3_0
# Newly assigned in Unicode 3.0.0 (September, 1999)

Value:	V3_1
# Newly assigned in Unicode 3.1.0 (March, 2001)

Value:	V3_2
# Newly assigned in Unicode 3.2.0 (March, 2002)

Value:	V4_0
# Newly assigned in Unicode 4.0.0 (April, 2003)

Value:	V4_1
# Newly assigned in Unicode 4.1.0 (March, 2005)

Value:	V5_0
# Newly assigned in Unicode 5.0.0 (July, 2006)

Value:	V5_1
# Newly assigned in Unicode 5.1.0 (March, 2008)

Value:	V5_2
# Newly assigned in Unicode 5.2.0 (October, 2009)

Value:	V6_0
# Newly assigned in Unicode 6.0.0 (October, 2010)

Value:  V6_1
# Newly assigned in Unicode 6.1.0 (January, 2012)

Value:  V6_2
# Newly assigned in Unicode 6.2.0 (September, 2012)

Value:  V6_3
# Newly assigned in Unicode 6.3.0 (September, 2013)

Value:  V7_0
# Newly assigned in Unicode 7.0.0 (June, 2014)

Value:  V8_0
# Newly assigned in Unicode 8.0.0 (June, 2015)

Value:  V9_0
# Newly assigned in Unicode 9.0.0 (June, 2016)

Value:  V10_0
# Newly assigned in Unicode 10.0.0 (June, 2017)

Value:  V11_0
# Newly assigned in Unicode 11.0.0 (June, 2018)

Value:  V12_0
# Newly assigned in Unicode 12.0.0 (March, 2019)

Value:  V12_1
# Newly assigned in Unicode 12.1.0 (May, 2019)

Value:  V13_0
# Newly assigned in Unicode 13.0.0 (March, 2020)

Value:  V14_0
# Newly assigned in Unicode 14.0.0 (September, 2021)

Value:  V15_0
# Newly assigned in Unicode 15.0.0 (September, 2022)

Value:  V15_1
# Newly assigned in Unicode 15.1.0 (September, 2023)

Value:  V16_0
# Newly assigned in Unicode 16.0.0 (September, 2024)

File:	extracted/DerivedBidiClass
Property:	Bidi_Class
# Bidi Class (listing UnicodeData.txt, field 4: see UAX #44: https://www.unicode.org/reports/tr44/)
# Unlike other properties, unassigned code points in blocks
# reserved for right-to-left scripts are given either values R or AL,
# and unassigned code points in the Currency Symbols block are given the value ET.
# For details see the @missing lines below.
#
# The unassigned code points that default to BN have one of the following properties:
#     Default_Ignorable_Code_Point
#     Noncharacter_Code_Point
#
# For all other cases:
Format:	valueStyle=short skipUnassigned=Left_To_Right

File:	extracted/DerivedBinaryProperties
Property:	Bidi_Mirrored
# Bidi_Mirrored (listing UnicodeData.txt, field 9: see UAX #44: https://www.unicode.org/reports/tr44/)

File:	extracted/DerivedCombiningClass
Property:	Canonical_Combining_Class
# Combining Class (listing UnicodeData.txt, field 3: see UAX #44: https://www.unicode.org/reports/tr44/)
Format: nameStyle=none valueStyle=short skipUnassigned=Not_Reordered

File:	DerivedCoreProperties
Property:	Math
# Derived Property: Math
#  Generated from: Sm + Other_Math

Property:	Alphabetic
# Derived Property: Alphabetic
#  Generated from: Uppercase + Lowercase + Lt + Lm + Lo + Nl + Other_Alphabetic

Property:	Lowercase
# Derived Property: Lowercase
#  Generated from: Ll + Other_Lowercase

Property:	Uppercase
# Derived Property: Uppercase
#  Generated from: Lu + Other_Uppercase

Property:   Cased
# Derived Property:   Cased (Cased)
#  As defined by Unicode Standard Definition D135
#  C has the Lowercase or Uppercase property or has a General_Category value of Titlecase_Letter.

Property:   Case_Ignorable
# Derived Property:   Case_Ignorable (CI)
#  As defined by Unicode Standard Definition D136
#  C is defined to be case-ignorable if 
#    Word_Break(C) = MidLetter or MidNumLet or Single_Quote, or
#    General_Category(C) = Nonspacing_Mark (Mn), Enclosing_Mark (Me), Format (Cf), Modifier_Letter (Lm), or Modifier_Symbol (Sk).

Property:   Changes_When_Lowercased
# Derived Property:   Changes_When_Lowercased (CWL)
#  Characters whose normalized forms are not stable under a toLowercase mapping.
#  For more information, see D139 in Section 3.13, "Default Case Algorithms". 
#  Changes_When_Lowercased(X) is true when toLowercase(toNFD(X)) != toNFD(X)

Property:   Changes_When_Uppercased
# Derived Property:   Changes_When_Uppercased (CWU)
#  Characters whose normalized forms are not stable under a toUppercase mapping.
#  For more information, see D140 in Section 3.13, "Default Case Algorithms". 
#  Changes_When_Uppercased(X) is true when toUppercase(toNFD(X)) != toNFD(X)

Property:   Changes_When_Titlecased
# Derived Property:   Changes_When_Titlecased (CWT)
#  Characters whose normalized forms are not stable under a toTitlecase mapping.
#  For more information, see D141 in Section 3.13, "Default Case Algorithms". 
#  Changes_When_Titlecased(X) is true when toTitlecase(toNFD(X)) != toNFD(X)

Property:   Changes_When_Casefolded
# Derived Property:   Changes_When_Casefolded (CWCF)
#  Characters whose normalized forms are not stable under case folding.
#  For more information, see D142 in Section 3.13, "Default Case Algorithms". 
#  Changes_When_Casefolded(X) is true when toCasefold(toNFD(X)) != toNFD(X)

Property:   Changes_When_Casemapped
# Derived Property:   Changes_When_Casemapped (CWCM)
#  Characters whose normalized forms are not stable under case mapping.
#  For more information, see D143 in Section 3.13, "Default Case Algorithms". 
#  Changes_When_Casemapped(X) is true when CWL(X), or CWT(X), or CWU(X)

Property:	ID_Start
# Derived Property: ID_Start
#  Characters that can start an identifier.
#  Generated from:
#      Lu + Ll + Lt + Lm + Lo + Nl
#    + Other_ID_Start
#    - Pattern_Syntax
#    - Pattern_White_Space
#  NOTE: See UAX #31 for more information

Property:	ID_Continue
# Derived Property: ID_Continue
#  Characters that can continue an identifier.
#  Generated from:
#      ID_Start
#    + Mn + Mc + Nd + Pc
#    + Other_ID_Continue
#    - Pattern_Syntax
#    - Pattern_White_Space
#  NOTE: See UAX #31 for more information

Property:	XID_Start
# Derived Property: XID_Start
#  ID_Start modified for closure under NFKx
#  Modified as described in UAX #15
#  NOTE: Does NOT remove the non-NFKx characters.
#        Merely ensures that if isIdentifer(string) then isIdentifier(NFKx(string))
#  NOTE: See UAX #31 for more information

Property:	XID_Continue
# Derived Property: XID_Continue
#  Mod_ID_Continue modified for closure under NFKx
#  Modified as described in UAX #15
#  NOTE: Does NOT remove the non-NFKx characters.
#        Merely ensures that if isIdentifer(string) then isIdentifier(NFKx(string))
#  NOTE: See UAX #31 for more information

Property:	Default_Ignorable_Code_Point
# Derived Property: Default_Ignorable_Code_Point
#  Generated from
#    Other_Default_Ignorable_Code_Point
#  + Cf (Format characters)
#  + Variation_Selector
#  - White_Space
#  - FFF9..FFFB (Interlinear annotation format characters)
#  - 13430..13440 (Egyptian hieroglyph format characters)
#  - Prepended_Concatenation_Mark (Exceptional format characters that should be visible)
#
# There are currently no stability guarantees for DICP. However, the
# values of DICP interact with the derivation of XID_Continue
# and NFKC_CF, for which there are stability guarantees.
# Maintainers of this property should note that in the
# unlikely case that the DICP value changes for an existing character
# which is also XID_Continue=Yes, then exceptions must be put
# in place to ensure that the NFKC_CF mapping value for that
# existing character does not change.

Property:	Grapheme_Extend
# Derived Property: Grapheme_Extend
#  Generated from: Me + Mn + Other_Grapheme_Extend
#  Note: depending on an application's interpretation of Co (private use),
#  they may be either in Grapheme_Base, or in Grapheme_Extend, or in neither.


Property:	Grapheme_Base
# Derived Property: Grapheme_Base
#  Generated from: [0..10FFFF] - Cc - Cf - Cs - Co - Cn - Zl - Zp - Grapheme_Extend
#  Note: depending on an application's interpretation of Co (private use),
#  they may be either in Grapheme_Base, or in Grapheme_Extend, or in neither.

Property:	Grapheme_Link
# Derived Property: Grapheme_Link (deprecated)
#  Generated from: Canonical_Combining_Class=Virama
#  Use Canonical_Combining_Class=Virama directly instead

Property:	Indic_Conjunct_Break
# Derived Property: Indic_Conjunct_Break
#  Generated from the Grapheme_Cluster_Break, Indic_Syllabic_Category,
#  Canonical_Combining_Class, and Script properties as described in UAX #44:
#  https://www.unicode.org/reports/tr44/.
Format:	nameStyle=short valueStyle=short skipValue=None

File:	extracted/DerivedDecompositionType
Property:	Decomposition_Type
Format:	skipValue=None
# Decomposition_Type (from UnicodeData.txt, field 5: see UAX #44: https://www.unicode.org/reports/tr44/)

File:	extracted/DerivedEastAsianWidth
Property:	East_Asian_Width
Format:	valueStyle=short skipUnassigned=Neutral
# East_Asian_Width (listing EastAsianWidth.txt, field 1)

File:	extracted/DerivedGeneralCategory
Property:	General_Category
Format:	valueStyle=short noLabel

File:	extracted/DerivedJoiningGroup
Property:	Joining_Group
# Joining Group (listing ArabicShaping.txt, field 3)
Format: skipValue=No_Joining_Group

File:	extracted/DerivedJoiningType
Property:	Joining_Type
#	Type T is derived, as described in ArabicShaping.txt
Format:	valueStyle=short skipValue=Non_Joining

File:	extracted/DerivedLineBreak
Property:	Line_Break
Format:	valueStyle=short skipUnassigned=Unknown

File:	DerivedNormalizationProps

Property:	FC_NFKC_Closure
# Derived Property: FC_NFKC_Closure  (DEPRECATED as of Unicode 6.0.0)
#  Generated from computing: b = NFKC(Fold(a)); c = NFKC(Fold(b));
#  Then if (c != b) add the mapping from a to c to the set of
#  mappings that constitute the FC_NFKC_Closure list
#  Uses the full case folding from CaseFolding.txt, without the T option.
Format:	nameStyle=short mergeRanges=false

Property:	Full_Composition_Exclusion
# Derived Property: Full_Composition_Exclusion
#  Generated from: Composition Exclusions + Singletons + Non-Starter Decompositions

Property:	NFD_QuickCheck
# Derived Property: NFD_QuickCheck
#  Generated from computing decomposibles
Format: nameStyle=short valueStyle=short skipValue=Yes

Property:	NFC_QuickCheck
# Derived Property: NFC_QuickCheck
#  Generated from computing decomposibles (and characters that may compose with previous ones)
Format: nameStyle=short valueStyle=short skipValue=Yes

Property:	NFKD_QuickCheck
# Derived Property: NFKD_QuickCheck
#  Generated from computing decomposibles
Format: nameStyle=short valueStyle=short skipValue=Yes

Property:	NFKC_QuickCheck
# Derived Property: NFKC_QuickCheck
#  Generated from computing decomposibles (and characters that may compose with previous ones)
Format: nameStyle=short valueStyle=short skipValue=Yes

Property:	Expands_On_NFD
# Derived Property: Expands_On_NFD (DEPRECATED as of Unicode 6.0.0)
#   Generated according to UAX #15.
#   Characters whose normalized length is not one.
#   WARNING: Normalization of STRINGS must use the algorithm in UAX #15 because characters may interact.
#            The length of a normalized string is not necessarily the sum of the lengths of the normalized characters!

Property:	Expands_On_NFC
# Derived Property: Expands_On_NFC (DEPRECATED as of Unicode 6.0.0)
#   Generated according to UAX #15.
#   Characters whose normalized length is not one.
#   WARNING: Normalization of STRINGS must use the algorithm in UAX #15 because characters may interact.
#            The length of a normalized string is not necessarily the sum of the lengths of the normalized characters!


Property:	Expands_On_NFKD
# Derived Property: Expands_On_NFKD (DEPRECATED as of Unicode 6.0.0)
#   Generated according to UAX #15.
#   Characters whose normalized length is not one.
#   WARNING: Normalization of STRINGS must use the algorithm in UAX #15 because characters may interact.
#            The length of a normalized string is not necessarily the sum of the lengths of the normalized characters!


Property:	Expands_On_NFKC
# Derived Property: Expands_On_NFKC (DEPRECATED as of Unicode 6.0.0)
#   Generated according to UAX #15.
#   Characters whose normalized length is not one.
#   WARNING: Normalization of STRINGS must use the algorithm in UAX #15 because characters may interact.
#            The length of a normalized string is not necessarily the sum of the lengths of the normalized characters!

Property:   NFKC_Casefold
# Derived Property:   NFKC_Casefold (NFKC_CF)
#   This property removes certain variations from characters: case, compatibility, and default-ignorables.
#   It is used for loose matching and certain types of identifiers.
#   It is constructed by applying NFKC, CaseFolding, and removal of Default_Ignorable_Code_Points.
#   The process of applying these transformations is repeated until a stable result is produced.
#   WARNING: Application to STRINGS must apply NFC after mapping each character, because characters may interact.
#            For more information, see [https://www.unicode.org/reports/tr44/]
# Omitted code points are unchanged by this mapping.
# @missing: 0000..10FFFF; NFKC_CF; <code point>
Format: nameStyle=short skipValue="<code point>"

Property:   NFKC_Simple_Casefold
# Derived Property:   NFKC_Simple_Casefold (NFKC_SCF)
#   This property removes certain variations from characters: case, compatibility, and default-ignorables.
#   It is used for loose matching and certain types of identifiers.
#   It is constructed by applying NFKC, simple CaseFolding, and removal of Default_Ignorable_Code_Points.
#   The process of applying these transformations is repeated until a stable result is produced.
#   WARNING: Application to STRINGS must apply NFC after mapping each character, because characters may interact.
#            For more information, see [https://www.unicode.org/reports/tr44/]
# Omitted code points are unchanged by this mapping.
# @missing: 0000..10FFFF; NFKC_SCF; <code point>
Format: nameStyle=short skipValue="<code point>"

Property:   Changes_When_NFKC_Casefolded
# Derived Property:   Changes_When_NFKC_Casefolded (CWKCF)
#  Characters that are not stable under an NFKC_Casefold mapping.
#  As defined by cp != NFKC_Casefold(cp)

File:	extracted/DerivedNumericType
Property:	Numeric_Type
# Derived Property:   Numeric_Type
#  The values are based on fields 6-8 of UnicodeData.txt, plus the fields 
#  kAccountingNumeric, kOtherNumeric, kPrimaryNumeric in the Unicode Han Database (Unihan).
#  The derivations for these values are as follows.
#   Numeric_Type=Decimal: When there is a value in field 6.
#   Numeric_Type=Digit:   When there is a value in field 7, but not in field 6.
#   Numeric_Type=Numeric: When there are values for kAccountingNumeric, kOtherNumeric, kPrimaryNumeric,
#                         or there is a value in field 8, but not in field 7.
#   Numeric_Type=None:    Otherwise
Format: skipValue=None

File:	extracted/DerivedNumericValues
Property:	Numeric_Value
# Derived Property:   Numeric_Value
#  Field 1:
#    The values are based on field 8 of UnicodeData.txt, plus the fields 
#    kAccountingNumeric, kOtherNumeric, kPrimaryNumeric in the Unicode Han Database (Unihan).
#    The derivations for these values are as follows.
#      Numeric_Value = the value of kAccountingNumeric, kOtherNumeric, or kPrimaryNumeric, if they exist; otherwise
#      Numeric_Value = the value of field 8, if it exists; otherwise
#      Numeric_Value = NaN
#  Field 2:
#    This field is empty; it used to be a copy of the numeric type.
#
#  Field 3:
#    This field was added to this extracted data as of Unicode 5.1.0,
#    expressing the same numeric value either as a whole integer
#    where possible, or as a rational fraction such as "1/6".
#
# WARNING: Certain values, such as 0.16666667, are repeating fractions.
# Although they are only printed with a limited number of decimal places
# in this file, they should be expressed to the limits of the precision
# available when used.
#
Format: sortNumeric

File:	HangulSyllableType
Property:	Hangul_Syllable_Type
Format:	valueStyle=short skipValue=Not_Applicable

File:   NormalizationTest
Property: SPECIAL

File:   BidiTest
#
# This file provides a conformance test for UBA (Unicode Bidi Algorithm) implementations.
# It is designed to be reasonably compact, and yet provide a thorough test of all cases up to
# a given limit (currently 4). Additionally, it contains some longer cases useful for testing
# some common pitfalls of UBA implementations.
#
# Note that for the test cases in this file, it is assumed that no bidi
# paired brackets exist in the input that would affect the resolved levels
# or reordering. For test cases with bidi paired brackets and other
# character-code specific test cases, refer to BidiCharacterTest.txt.
# Implementations are expected to correctly cover all test cases in both
# test files.
#
# The test cases in this file are further limited in the following ways:
#
# - The Bidi_Class B (Paragraph_Separator) only appears as the last
#   character in a sequence. Thus, each sequence is assumed to consist of
#   only one paragraph. Implementations may need extra testing for rule P1
#   of the UBA.
#
# - For the application of rules L1 and L2, it is assumed that all the
#   characters in the input would be rendered on a single line, with no line
#   breaks.
#
# - Implementation of rules L3 and L4 is platform- and character-specific
#   and test cases for it are not provided in this data file.
#
#
# Format:
#
# All tokens may be separated by whitespaces (space or tab). There are three kinds of lines:
# Levels, Reorder, and data.
#
# A Levels line indicates that all following data lines, up to the next Levels line,
# have the same resulting ordering levels. It has the following format:
#
# @Levels: <levels>
#
#    <levels> =     An ordered space-delimited list of numbers indicating the resulting levels
#                   for each input property value. The UBA does not assign levels to certain values;
#                   those are indicated with an x. See the note below.
# Examples:
#   @Levels:    1 0
#   @Levels:    x 1 x 2
#
# A Reorder line indicates that all following data lines, up to the next Reorder line,
# have the same resulting reordering. It has the following format:
#
# @Reorder: <ordering>
#
#    <ordering> =   An ordered space-delimited list of numbers indicating the resulting
#                   visual ordering from left to right. The numbers are zero-based, and
#                   are indexes into the input string. Items with a level of x are skipped.
#                   Thus "1 0" indicates what would happen with input of "L R" and an RTL
#                   paragraph direction.
# Example:
#   @Reorder:    1 0
#   @Reorder:    3 1
#
# A data line has the following format:

# <input> ; <bitset>

#   <input>  =      An ordered list of BIDI property values
#   <bitset> =      A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL
#                   Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
# Example:
#    L LRE R R; 7
#    L LRE R AL; 7
#
# Any other line starting with @ is to be ignored (this allows some degree of forward compatibility).
#
# Usage:
#
# - If the implementation API allows a list of bidi property values as input:
#
#   For each of the paragraph levels in the bitset:
#     Find the levels in each line, and compare that to the last @Levels values.
#       If they are different, the test fails.
#     Reorder the elements, and compare to the @Reorder values.
#       If they are different, the test fails.
#
# - If the implementation allows for a character string as input,
#   randomly pick characters from those with the same Bidi_Class values,
#   and test the reordering as above.
#
# Note that the UBA doesn't specify the output level or order of certain characters,
# such as LRO. These are omitted from the reordered output. Thus the following two
# input lines have the same result (0), since the LRE (item 1) is omitted on the second line.
#
#   L; 7
#   L LRE; 7
#
Property: SPECIAL

File:	PropList

Property:	White_Space

Property:	Bidi_Control

Property:	Join_Control

Property:	Dash

Property:	Hyphen

Property:	Quotation_Mark

Property:	Terminal_Punctuation

Property:	Other_Math

Property:	Hex_Digit

Property:	ASCII_Hex_Digit

Property:	Other_Alphabetic

Property:	Ideographic

Property:	Diacritic

Property:	Extender

Property:	Other_Lowercase

Property:	Other_Uppercase

Property:	Noncharacter_Code_Point

Property:	Other_Grapheme_Extend

Property:	IDS_Binary_Operator

Property:	IDS_Trinary_Operator

Property:	IDS_Unary_Operator

Property:	Radical

Property:	Unified_Ideograph

Property:	Other_Default_Ignorable_Code_Point

Property:	Deprecated

Property:	Soft_Dotted

Property:	Logical_Order_Exception

Property:	Other_ID_Start

Property:	Other_ID_Continue

Property:	ID_Compat_Math_Continue

Property:	ID_Compat_Math_Start

Property:	STerm

Property:	Variation_Selector
Property:	Pattern_White_Space
Property:	Pattern_Syntax
Property:	Prepended_Concatenation_Mark
Property:	Regional_Indicator

File:	PropertyAliases
Property: SPECIAL

File:	PropertyValueAliases
Property: SPECIAL

#File:   unihan
#Property: SPECIAL

File:	Scripts
# For more information, see:
#   UAX #24, Unicode Script Property: https://www.unicode.org/reports/tr24/
#     Especially the sections:
#       https://www.unicode.org/reports/tr24/#Assignment_Script_Values
#       https://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values
#
Property:	Script
Format:	nameStyle=none skipValue=Unknown

File:	LineBreak
Format: kenFile skipValue=Unknown
#
# Line_Break Property
#
# This file is a normative contributory data file in the
# Unicode Character Database.
#
# The format is two fields separated by a semicolon.
# Field 0: Unicode code point value or range of code point values
# Field 1: Line_Break property, consisting of one of the following values:
#   Non-tailorable:
#         "BK", "CM", "CR", "GL", "LF", "NL", "SP", "WJ", "ZW", "ZWJ"
#   Tailorable:
#         "AI", "AK", "AL", "AP", "AS", "B2", "BA", "BB", "CB", "CJ",
#         "CL", "CP", "EB", "EM", "EX", "H2", "H3", "HL", "HY", "ID",
#         "IN", "IS", "JL", "JT", "JV", "NS", "NU", "OP", "PO", "PR",
#         "QU", "RI", "SA", "SG", "SY", "VF", "VI", "XX"
#  - All code points, assigned and unassigned, that are not listed
#      explicitly are given the value "XX".
#  - The unassigned code points in the following blocks default to "ID":
#         CJK Unified Ideographs Extension A: U+3400..U+4DBF
#         CJK Unified Ideographs:             U+4E00..U+9FFF
#         CJK Compatibility Ideographs:       U+F900..U+FAFF
#  - All undesignated code points in Planes 2 and 3, whether inside or
#      outside of allocated blocks, default to "ID":
#         Plane 2:                            U+20000..U+2FFFD
#         Plane 3:                            U+30000..U+3FFFD
#  - All unassigned code points in the following Plane 1 ranges, whether
#      inside or outside of allocated blocks, also default to "ID":
#         Plane 1 range:                      U+1F000..U+1FAFF
#         Plane 1 range:                      U+1FC00..U+1FFFD
#  - The unassigned code points in the following block default to "PR":
#         Currency Symbols:                   U+20A0..U+20CF
#
# Character ranges are specified as for other property files in the
# Unicode Character Database.
#
# The comments following the number sign "#" list the General_Category
# property value or the L& alias of the derived value LC, the Unicode
# character name or names, and, in lines with ranges of code points,
# the code point count in square brackets.
#
# For more information, see UAX #14: Unicode Line Breaking Algorithm,
# at https://www.unicode.org/reports/tr14/
#
Property: Line_Break

File:	EastAsianWidth
Format: kenFile skipValue=Neutral
#
# East_Asian_Width Property
#
# This file is a normative contributory data file in the
# Unicode Character Database.
#
# The format is two fields separated by a semicolon.
# Field 0: Unicode code point value or range of code point values
# Field 1: East_Asian_Width property, consisting of one of the following values:
#         "A", "F", "H", "N", "Na", "W"
#  - All code points, assigned or unassigned, that are not listed
#      explicitly are given the value "N".
#  - The unassigned code points in the following blocks default to "W":
#         CJK Unified Ideographs Extension A: U+3400..U+4DBF
#         CJK Unified Ideographs:             U+4E00..U+9FFF
#         CJK Compatibility Ideographs:       U+F900..U+FAFF
#  - All undesignated code points in Planes 2 and 3, whether inside or
#      outside of allocated blocks, default to "W":
#         Plane 2:                            U+20000..U+2FFFD
#         Plane 3:                            U+30000..U+3FFFD
#
# Character ranges are specified as for other property files in the
# Unicode Character Database.
#
# The comments following the number sign "#" list the General_Category
# property value or the L& alias of the derived value LC, the Unicode
# character name or names, and, in lines with ranges of code points,
# the code point count in square brackets.
#
# For more information, see UAX #11: East Asian Width,
# at https://www.unicode.org/reports/tr11/
#
Property: East_Asian_Width

File:	VerticalOrientation
Format: kenFile skipValue=Rotated
#
# Vertical_Orientation (vo) Property
#
# This file defines the Vertical_Orientation property. See UAX #50:
# Unicode Vertical Text Layout, at https://www.unicode.org/reports/tr50/
#
# The format of the file is two fields separated by a semicolon.
# Field 0: Unicode code point value or range of code point values in
#   hexadecimal form
# Field 1: Vertical_Orientation property value, one of the following:
#   U - Upright, the same orientation as in the code charts
#   R - Rotated 90 degrees clockwise compared to the code charts
#   Tu - Transformed typographically, with fallback to Upright
#   Tr - Transformed typographically, with fallback to Rotated
#
#  - Certain ranges of unassigned code points default to U. These ranges
#      are mostly associated with CJK scripts and punctuation, or with
#      a small number of other scripts which are predominantly Upright.
#      The private use areas also default to U, because of their most
#      common use for CJK. In the following list of explicit code points
#      and ranges, all unassigned code points default to U:
#         Canadian Syllabics Extended:        U+18B0..U+18FF
#         Reserved Default_Ignorable_Code_Point:      U+2065
#         Number Forms:                       U+2150..U+218F
#         Control Pictures & OCR              U+2400..U+245F
#         Symbols:                            U+2BB8..U+2BFF
#         CJK-Related & Yi:                   U+2E80..U+A4CF
#         Hangul Jamo Extended-A:             U+A960..U+A97F
#         Hangul Syllables & Jamo Extended-B: U+AC00..U+D7FF
#         PUA & CJK Compatibility Ideographs: U+E000..U+FAFF
#         Vertical Forms:                     U+FE10..U+FE1F
#         Small Form Variants:                U+FE50..U+FE6F
#         Fullwidth Forms:                            U+FFE7
#         Specials:                           U+FFF0..U+FFF8
#         Siddham:                           U+11580..U+115FF
#         Zanabazar Square & Soyombo:        U+11A00..U+11AAF
#         Egyptian Hieroglyphs & Controls:   U+13000..U+143FF
#         Anatolian Hieroglyphs:             U+14400..U+1467F
#         Ideographic Symbols & Tangut:      U+16FE0..U+18AFF
#         Khitan Small Script & Tangut Sup:  U+18B00..U+18D7F
#         Kana Extended-B:                   U+1AFF0..U+1AFFF
#         Kana Extended-A & Small Kana Ext:  U+1B100..U+1B16F
#         Nushu:                             U+1B170..U+1B2FF
#         Musical Symbols:                   U+1CF00..U+1CFCF
#         Musical Symbols:                   U+1D000..U+1D1FF
#         Mayan Numerals:                    U+1D2E0..U+1D2FF
#         Symbols & Rods:                    U+1D300..U+1D37F
#         Sutton SignWriting:                U+1D800..U+1DAAF
#         Game Symbols:                      U+1F000..U+1F0FF
#         Enclosed Symbols:                  U+1F100..U+1F2FF
#         Symbols:                           U+1F680..U+1F7FF
#         Symbols and Pictographs:           U+1F900..U+1F9FF
#         Chess Symbols & Pictographs Ext-A: U+1FA00..U+1FAFF
#         Plane 2:                           U+20000..U+2FFFD
#         Plane 3:                           U+30000..U+3FFFD
#         Plane 15 PUA:                      U+F0000..U+FFFFD
#         Plane 16 PUA:                     U+100000..U+10FFFD
#
#  - All other code points, assigned and unassigned, that are not listed
#      explicitly in the data section of this file are given the value R.
#
# The comments following the number sign "#" list the General_Category
# property value or the L& alias of the derived value LC, the Unicode
# character name or names, and, in lines with ranges of code points,
# the code point count in square brackets.
#
Property: VerticalOrientation

File:	IndicPositionalCategory
#
# This file defines the following property:
#
#    Indic_Positional_Category     enumerated property
#
# Scope: This property is aimed at the problem of
# the specification of syllabic structure for Indic scripts.
# Because dependent vowels (matras), visible viramas, and other
# characters are placed in notional slots around the consonant (or
# consonant cluster) core of an Indic syllable, there may be
# cooccurrence constraints or other interactions. Also, it may be
# desirable, in cases where more than one such character may occur in
# sequence, as for example, in a top slot and a bottom slot, to
# specify preferred orders for spelling. As such, this property
# is designed primarily to supplement the Indic_Syllabic_Category
# property.
#
# In addition to combining marks associated with Indic scripts, the
# Indic_Positional_Category has non-trivial values for special signs
# associated with Indic_Syllabic_Category=Consonant_Prefixed
# or Indic_Syllabic_Category=Consonant_Preceding_Repha. Those signs
# have General_Category=Lo, rather than being combining marks.
# They occur in initial position in syllabic structure. However, when
# rendered, they appear as marks positioned with respect to another
# base letter (usually above it). Hence, having an explicit value for
# Indic_Positional_Category for those signs can be helpful.
#
# Note that this property is *not* intended as
# a prescriptive property regarding display or font design,
# for a number of reasons. Good font design requires information
# that is outside the context of a character encoding standard,
# and is best handled in other venues. For Indic dependent
# vowels and similar characters, in particular:
#
#   1. Matra placement may vary somewhat based on typeface design.
#   2. Matra placement, even within a single script, may vary
#      somewhat according to historic period or local conventions.
#   3. Matra placement may be changed by explicit orthographic reform
#      decisions.
#   4. Matras may ligate in various ways with a consonant (or even
#      other elements of a syllable) instead of occurring in a
#      discrete location.
#   5. Matra display may be contextually determined. This is
#      notable, for example, in the Tamil script, where the shape
#      and placement of -u and -uu vowels depends strongly on
#      which consonant they adjoin.
#
# Format:
#    Field 0  Unicode code point value or range of code point values
#    Field 1  Indic_Positional_Category property value
#
# Field 1 is followed by a comment field, starting with the number sign '#',
# which shows the General_Category property value, the Unicode character name
# or names, and, in lines with ranges of code points, the code point count in
# square brackets.
#
# The scripts assessed as containing dependent vowels or similar characters
# in the structural sense used for the Indic_Positional_Category are the
# following:
#
# Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
# Chakma, Cham, Devanagari, Dives Akuru, Dogra, Grantha, Gujarati,
# Gunjala Gondi, Gurmukhi, Gurung Khema, Hanunoo, Javanese, Kaithi,
# Kannada, Kawi, Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi,
# Kirat Rai, Lao, Lepcha, Limbu, Makasar, Malayalam, Marchen,
# Masaram Gondi, Meetei Mayek, Modi, Myanmar, Nandinagari, Newa,
# New Tai Lue, Oriya, Rejang, Saurashtra, Sharada, Siddham, Sinhala,
# Soyombo, Sundanese, Syloti Nagri, Tagalog, Tagbanwa, Tai Tham,
# Tai Viet, Takri, Tamil, Telugu, Thai, Tibetan, Tirhuta,
# Tulu-Tigalari, and Zanabazar Square.
#
# All characters for all other scripts not in that list
# take the default value for this property.
#
# See IndicSyllabicCategory.txt for a slightly more extended
# list of Indic scripts, including those which do not have
# positional characters. Currently, those additional
# Indic scripts without positional characters are
# Multani, Phags-pa, and Tai Le.
#
# Notes:
#
# 1. The following characters are all assigned the positional category Right,
# but may have different positions in some cases:
#   * U+0BC1 TAMIL VOWEL SIGN U and U+0BC2 TAMIL VOWEL SIGN UU have
#     contextually variable placement in Tamil.
#   * U+11341 GRANTHA VOWEL SIGN U and U+11342 GRANTHA VOWEL SIGN UU have
#     contextually variable placement in Grantha.
#   * U+11440 NEWA VOWEL SIGN O and U+11441 NEWA VOWEL SIGN AU have contextually
#     variable placement in Newa.
#
# 2. The following characters are all assigned the positional category Top,
# but may have different positions in some cases:
#   * U+1143E NEWA VOWEL SIGN E and U+1143F NEWA VOWEL SIGN AI have contextually
#     variable placement in Newa.
#
# 3. The following characters are all assigned the positional category Bottom,
# but may have different positions in some cases:
#   * U+0D41 MALAYALAM VOWEL SIGN U and U+0D42 MALAYALAM VOWEL SIGN UU form
#     complex ligatures with consonants in older Malayalam orthography, and
#     are spacing marks to the right of the base in reformed Malayalam
#     orthography.
#   * U+102F MYANMAR VOWEL SIGN U and U+1030 MYANMAR VOWEL SIGN UU have
#     contextually variable placement in Myanmar.
#   * U+1A69 TAI THAM VOWEL SIGN U and U+1A6A TAI THAM VOWEL SIGN UU have
#     contextually variable placement in Tai Tham.
#   * U+113BB TULU-TIGALARI VOWEL SIGN U and
#     U+113BC TULU-TIGALARI VOWEL SIGN UU form complex ligatures with
#     consonants.
#
# 4. The following character is assigned the positional category Left, but
# may have different positions in different styles:
#   * U+119D2 NANDINAGARI VOWEL SIGN I has stylistically variable placement
#     in Nandinagari.
Property: Indic_Positional_Category
Format:	roozbehFile separateValues=false valueStyle=short skipValue=NA
Value: Right
Value: Left
Value: Visual_Order_Left

# These are dependent vowels that occur to the left of the consonant
# letter in a syllable, but which occur in scripts using the visual order
# model, instead of the logical order model. Because of the different
# model, these left-side vowels occur first in the backing store (before
# the consonant letter) and are not reordered during text rendering.
#
# [Derivation: Logical_Order_Exception=Yes]
Value: Left_And_Right
Value: Top
Value: Bottom
Value: Top_And_Bottom
Value: Top_And_Right
Value: Top_And_Left
Value: Top_And_Left_And_Right
Value: Bottom_And_Right
Value: Bottom_And_Left
Value: Top_And_Bottom_And_Right
Value: Top_And_Bottom_And_Left
Value: Overstruck

File:	IndicSyllabicCategory
#
# This file defines the following property:
#
#    Indic_Syllabic_Category     enumerated property
#
# Scope: This property is aimed at two general problem
# areas involving the analysis and processing of Indic scripts:
#
#   1. Specification of syllabic structure.
#   2. Specification of segmentation rules.
#
# Both of these problem areas may benefit from having defined subtypes
# of Indic script characters which are relevant to how Indic
# syllables (or aksaras) are constructed. Note that rules for
# syllabic structure in Indic scripts may differ significantly
# from how phonological syllables are defined.
#
# Format:
#    Field 0  Unicode code point value or range of code point values
#    Field 1  Indic_Syllabic_Category property value
#
# Field 1 is followed by a comment field, starting with the number sign '#',
# which shows the General_Category property value, the Unicode character name
# or names, and, in lines with ranges of code points, the code point count in
# square brackets.
#
# The scripts assessed as Indic in the structural sense used for the
# Indic_Syllabic_Category are the following:
#
# Ahom, Balinese, Batak, Bengali, Bhaiksuki, Brahmi, Buginese, Buhid,
# Chakma, Cham, Devanagari, Dives Akuru, Dogra, Grantha, Gujarati,
# Gunjala Gondi, Gurmukhi, Gurung Khema, Hanunoo, Javanese, Kaithi,
# Kannada, Kawi, Kayah Li, Kharoshthi, Khmer, Khojki, Khudawadi,
# Kirat Rai, Lao, Lepcha, Limbu, Mahajani, Makasar, Malayalam,
# Marchen, Masaram Gondi, Meetei Mayek, Modi, Multani, Myanmar,
# Nandinagari, Newa, New Tai Lue, Oriya, Phags-pa, Rejang,
# Saurashtra, Sharada, Siddham, Sinhala, Soyombo, Sundanese,
# Syloti Nagri, Tagalog, Tagbanwa, Tai Le, Tai Tham, Tai Viet, Takri,
# Tamil, Telugu, Thai, Tibetan, Tirhuta, Tulu-Tigalari, and
# Zanabazar Square.
#
# All characters for all other scripts not in that list
# take the default value for this property, unless they
# are individually listed in this data file.
#
Property: Indic_Syllabic_Category
Format: roozbehFile valueStyle=short skipValue=Other
Value: Bindu
# Bindu/Anusvara (nasalization or -n)

# [Not derivable]
Value: Visarga
# Visarga (-h)
# Excludes letters for jihvamuliya and upadhmaniya, which are
#   related, but structured somewhat differently.

# [Not derivable]
Value: Avagraha
# Avagraha (elision of initial a- in sandhi)

# [Not derivable]
Value: Nukta
# Nukta (diacritic for borrowed consonants or other consonant
# modifications). Note that while the resulting sound is typically a
# consonant, the base letter a nukta follows may be an independent
# vowel. For example, <U+0A85 GUJARATI LETTER A, U+0AFD GUJARATI
# SIGN THREE-DOT NUKTA ABOVE> is used to transcribe ARABIC LETTER
# AIN.

# [Not derivable]
Value: Virama
# Virama (kills inherent vowel of consonant; may act as a Pure_Killer
#         or Invisible_Stacker depending on context)
# Only includes characters that can act both as visible killer viramas
# and consonant stackers. Separate property values exist for characters
# that can only act as pure killers, only as reordering killers, or only
# as consonant stackers.

# [Derivation: (ccc=9) - (InSC=Pure_Killer) - (InSC=Invisible_Stacker)
#  - (InSC=Reordering_Killer) - (InSC=Number_Joiner) - 2D7F]
Value: Pure_Killer
# Pure killer (kills inherent vowel of consonant; always visible;
#              has no conjuct formation, consonant stacking, or reordering
#              behavior)

# [Not derivable]
Value: Reordering_Killer
# Reordering killer (kills inherent vowel of consonant; always visible;
#                    may cause consonant reordering)

# [Not derivable]
Value: Invisible_Stacker
# Invisible stacker (usually kills inherent vowel of consonant; is not visible
#                    by itself; causes conjunct formation or consonant
#                    stacking)
#
# Note that in some scripts, such as Kharoshthi and Masaram Gondi, an invisible
# stacker may have a second function, changing the shape and/or location of the
# consonant preceding it, even when there is no consonant following the
# invisible stacker.

# [Not derivable]
Value: Vowel_Independent
# Independent Vowels (contrasted with matras)

# [Not derivable]
Value: Vowel_Dependent
# Dependent Vowels (contrasted with independent vowels and/or with
# complex placement). Known as matras in Indic scripts. Also
# includes vowel modifiers that follow dependent (and sometimes
# independent) vowels.

# [Not derivable]
Value: Vowel
# (Other) Vowels (reanalyzed as ordinary alphabetic letters or marks)

# [Not derivable]
Value: Consonant_Placeholder
# Consonant Placeholder
# This includes generic placeholders used for
# Indic script layout (NBSP and dotted circle), as well as a few script-
# specific vowel-holder characters which are not technically
# consonants, but serve instead as bases for placement of vowel marks.

# [Not derivable]
Value: Consonant
# Consonant (ordinary abugida consonants, with inherent vowels)

# [Not derivable]
Value: Consonant_Dead
# Dead Consonant (special consonant with killed vowel)

# [Not derivable]
Value: Consonant_With_Stacker
# Consonants that may make stacked ligatures with the next consonant
# without the use of a virama

# [Not derivable]
Value: Consonant_Prefixed
# Cluster-initial consonants

# [Not derivable]
Value: Consonant_Preceding_Repha
# Repha Form of RA (reanalyzed in some scripts), when preceding the main
# consonant.

# [Not derivable]
Value: Consonant_Initial_Postfixed
# Consonants that succeed the main consonant in character sequences, but are
# pronounced before it.

# [Not derivable]
Value: Consonant_Succeeding_Repha
# Repha Form of RA (reanalyzed in some scripts), when succeeding the main
# consonant.

# [Not derivable]
Value: Consonant_Subjoined
# Subjoined Consonant (C2 form subtending a base consonant in Tibetan, etc.)

# [Not derivable]
Value: Consonant_Medial
# Medial Consonant (medial liquid, occurring in clusters)

# [Not derivable]
Value: Consonant_Final
# Final Consonant (special final forms which do not take vowels)

# [Not derivable]
Value: Consonant_Head_Letter
# Head Letter (Tibetan)

# [Not derivable]
Value: Modifying_Letter
# Reanalyzed letters not participating in the abugida structure, but
# serving to modify the sound of an adjacent vowel or consonant.
# Note that this is not the same as General_Category=Modifier_Letter.

# [Not derivable]
Value: Tone_Letter
# Tone Letter (spacing lexical tone mark with status as a letter)

# [Not derivable]
Value: Tone_Mark
# Tone Mark (nonspacing or spacing lexical tone mark)

# [Not derivable]
Value: Gemination_Mark
# Gemination Mark (doubling of the preceding or following consonant)
#
# U+0A71 GURMUKHI ADDAK precedes the consonant it geminates, while the
# others follow the consonant they geminate.

# [Not derivable]
Value: Cantillation_Mark
# Cantillation Mark (recitation marks, such as svara markers for the Samaveda)

# [Not derivable]
Value: Register_Shifter
# Register Shifter (shifts register for consonants, akin to a tone mark)

# [Not derivable]
Value: Syllable_Modifier
# Syllable Modifier (miscellaneous combining characters that modify
# something in the orthographic syllable they succeed or appear in)

# [Not derivable]
Value: Consonant_Killer
# Consonant Killer (signifies that the previous consonant or consonants are
# not pronounced)

# [Not derivable]
Value: Non_Joiner
# Non_Joiner (Zero Width Non-Joiner)

# [Not derivable]
Value: Joiner
# Joiner (Zero Width Joiner)

# [Not derivable]
Value: Number_Joiner
# Number_Joiner (forms ligatures between numbers for multiplication)

# [Not derivable]
Value: Number
# Number (can be used as vowel-holders like consonant placeholders)
# Note: A number may even hold subjoined consonants which may in turn
# have been formed using a virama or a stacker, e.g. the sequence
# <U+1A93, U+1A60, U+1A34> where THAI THAM LETTER LOW TA is subjoined to
# TAI THAM THAM DIGIT THREE using an invisible stacker.

# [Not derivable]
Value: Brahmi_Joining_Number
# Brahmi Joining Number (may be joined by a Number_Joiner of the same
# script, e.g. in Brahmi)
#
# Note: These are different from Numbers, in the way that there is no known
# evidence of Brahmi Joining Numbers taking vowels or subjoined consonants. 
# Until such evidence is found, implementations may assume that Brahmi
# Joining Numbers only participate in shaping with other Brahmi Joining
# Numbers.

# [Not derivable]

File:	UnicodeData
Property: SPECIAL

File:	SpecialCasing
Property: SPECIAL

File:	extra/StandardizedVariants
Property: SPECIAL

File:	extra/NamedSequences
Property: SPECIAL

File:	extra/NamedSequencesProv
Property: SPECIAL

HackName:	noBreak
HackName:	Arabic_Presentation_Forms-A
HackName:	Arabic_Presentation_Forms-B
HackName:	CJK_Symbols_and_Punctuation
HackName:	Combining_Diacritical_Marks_for_Symbols
HackName:	Enclosed_CJK_Letters_and_Months
HackName:	Greek_and_Coptic
HackName:	Halfwidth_and_Fullwidth_Forms
HackName:	Latin-1_Supplement
HackName:	Latin_Extended-A
HackName:	Latin_Extended-B
HackName:	Miscellaneous_Mathematical_Symbols-A
HackName:	Miscellaneous_Mathematical_Symbols-B
HackName:	Miscellaneous_Symbols_and_Arrows
HackName:	Superscripts_and_Subscripts
HackName:	Supplemental_Arrows-A
HackName:	Supplemental_Arrows-B
HackName:	Supplementary_Private_Use_Area-A
HackName:	Supplementary_Private_Use_Area-B
HackName:	Canadian-Aboriginal
HackName:   Latin Extended-C
HackName:   Cyrillic Extended-A
HackName:   Cyrillic Extended-B
HackName:   Latin Extended-D
HackName:   Phags-pa
HackName:   Hangul Jamo Extended-A
HackName:   Myanmar Extended-A
HackName:   Hangul Jamo Extended-B
HackName:   Cuneiform Numbers and Punctuation
HackName:   
HackName:   

#HackName:	Old-Italic

FinalComments
Note that PropertyAliases sorts by the long name, while PropertyValueAliases
sorts by the short name
ArabicShaping
BidiMirroring
CompositionExclusions
StandardizedVariants


